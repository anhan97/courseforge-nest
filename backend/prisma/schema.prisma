// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  firstName   String?  @map("first_name")
  lastName    String?  @map("last_name")
  avatar      String?
  bio         String?
  role        UserRole @default(STUDENT)
  isActive    Boolean  @default(true) @map("is_active")
  isVerified  Boolean  @default(false) @map("is_verified")
  lastLoginAt DateTime? @map("last_login_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  enrollments       Enrollment[]
  lessonProgress    LessonProgress[]
  userProgress      UserProgress[]
  orders            Order[]
  reviews           Review[]
  notifications     Notification[]

  @@map("users")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  slug        String   @unique
  imageUrl    String?  @map("image_url")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  courses Course[]

  @@map("categories")
}

model Course {
  id             String       @id @default(uuid())
  title          String
  description    String?
  shortDescription String?    @map("short_description")
  thumbnailUrl   String?      @map("thumbnail_url")
  price          Decimal      @default(0) @db.Decimal(10, 2)
  originalPrice  Decimal?     @map("original_price") @db.Decimal(10, 2)
  currency       String       @default("USD")
  language       String       @default("en")
  level          String       @default("beginner") // beginner, intermediate, advanced
  duration       Int?         // in minutes
  requirements   String[]     @default([])
  whatYouLearn   String[]     @default([]) @map("what_you_learn")
  tags           String[]     @default([])
  seoTitle       String?      @map("seo_title")
  seoDescription String?      @map("seo_description")
  status         CourseStatus @default(DRAFT)
  isPublished    Boolean      @default(false) @map("is_published")
  publishedAt    DateTime?    @map("published_at")
  enrollmentCount Int         @default(0) @map("enrollment_count")
  rating         Decimal?     @db.Decimal(3, 2)
  reviewCount    Int          @default(0) @map("review_count")
  instructorId   String?      @map("instructor_id")
  categoryId     String       @map("category_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  // Relations
  category      Category       @relation(fields: [categoryId], references: [id])
  modules       Module[]
  enrollments   Enrollment[]
  userProgress  UserProgress[]
  orders        Order[]
  reviews       Review[]
  coupons       CourseCouple[]

  @@map("courses")
}

model Module {
  id          String   @id @default(uuid())
  courseId    String   @map("course_id")
  title       String
  description String?
  orderIndex  Int      @map("order_index")
  isPublished Boolean  @default(false) @map("is_published")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("modules")
}

model Lesson {
  id            String   @id @default(uuid())
  moduleId      String   @map("module_id")
  title         String
  description   String?
  videoUrl      String?  @map("video_url")
  videoDuration Int?     @map("video_duration") // in seconds
  videoProvider String?  @map("video_provider") // youtube, vimeo, cloudinary
  content       String?  // text content
  orderIndex    Int      @map("order_index")
  isFree        Boolean  @default(false) @map("is_free")
  isPublished   Boolean  @default(false) @map("is_published")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  module           Module             @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  attachments      LessonAttachment[]
  lessonProgress   LessonProgress[]

  @@map("lessons")
}

model LessonAttachment {
  id        String   @id @default(uuid())
  lessonId  String   @map("lesson_id")
  fileName  String   @map("file_name")
  fileUrl   String   @map("file_url")
  fileType  String   @map("file_type")
  fileSize  BigInt   @map("file_size")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("lesson_attachments")
}

model Enrollment {
  id               String           @id @default(uuid())
  userId           String           @map("user_id")
  courseId         String           @map("course_id")
  status           EnrollmentStatus @default(ACTIVE)
  enrolledAt       DateTime         @default(now()) @map("enrolled_at")
  completedAt      DateTime?        @map("completed_at")
  expiresAt        DateTime?        @map("expires_at")
  lastAccessedAt   DateTime?        @map("last_accessed_at")
  certificateUrl   String?          @map("certificate_url")
  completionPercentage Decimal      @default(0) @db.Decimal(5, 2) @map("completion_percentage")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model UserProgress {
  id                 String    @id @default(uuid())
  userId             String    @map("user_id")
  courseId           String    @map("course_id")
  completionPercentage Decimal @default(0) @db.Decimal(5, 2) @map("completion_percentage")
  lastAccessedLessonId String? @map("last_accessed_lesson_id")
  totalWatchTime     Int       @default(0) @map("total_watch_time") // in seconds
  enrolledAt         DateTime  @default(now()) @map("enrolled_at")
  lastAccessedAt     DateTime  @default(now()) @map("last_accessed_at")
  completedAt        DateTime? @map("completed_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("user_progress")
}

model LessonProgress {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  lessonId    String    @map("lesson_id")
  isCompleted Boolean   @default(false) @map("is_completed")
  watchTime   Int       @default(0) @map("watch_time") // in seconds
  lastPosition Int      @default(0) @map("last_position") // video position in seconds
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Order {
  id            String        @id @default(uuid())
  userId        String        @map("user_id")
  courseId      String        @map("course_id")
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod String?       @map("payment_method")
  stripePaymentIntentId String? @map("stripe_payment_intent_id")
  couponCode    String?       @map("coupon_code")
  discountAmount Decimal?     @map("discount_amount") @db.Decimal(10, 2)
  finalAmount   Decimal       @map("final_amount") @db.Decimal(10, 2)
  paidAt        DateTime?     @map("paid_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@map("orders")
}

model Coupon {
  id             String   @id @default(uuid())
  code           String   @unique
  discountType   String   @map("discount_type") // percentage, fixed
  discountValue  Decimal  @map("discount_value") @db.Decimal(10, 2)
  maxUses        Int?     @map("max_uses")
  usedCount      Int      @default(0) @map("used_count")
  isActive       Boolean  @default(true) @map("is_active")
  validFrom      DateTime @map("valid_from")
  validUntil     DateTime @map("valid_until")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  courses CourseCouple[]

  @@map("coupons")
}

model CourseCouple {
  id       String @id @default(uuid())
  courseId String @map("course_id")
  couponId String @map("coupon_id")

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@unique([courseId, couponId])
  @@map("course_coupons")
}

model Review {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  rating    Int      // 1-5 stars
  comment   String?
  isPublic  Boolean  @default(true) @map("is_public")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  title     String
  message   String
  type      String   // enrollment, course_update, payment, general
  isRead    Boolean  @default(false) @map("is_read")
  data      Json?    // additional data
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}